name: 'Manual Terraform Deploy (Azure)'

on:
  # Allows manual running from the GitHub Actions UI
  workflow_dispatch:
    inputs:
      # 1. Input for selecting the target environment/folder
      environment:
        description: 'Target Environment Folder'
        type: choice
        required: true
        default: dev
        options:
          - dev
          - prod # Add other environments here as they are created
          
      # 2. Input for selecting the branch to run against
      branch:
        description: 'Branch to run against (e.g., main or feature branch)'
        type: string
        required: true
        default: main

# Defines a single job named 'terraform'
jobs:
  terraform:
    name: 'Terraform Plan & Apply (${{ github.event.inputs.environment }})'
    runs-on: ubuntu-latest
    
    # 1. Define Environment Variables (including the dynamic directory path)
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      
      # NEW: Define the dynamic directory path as an environment variable
      ENV_DIR: environments/${{ github.event.inputs.environment }}

    steps:
      # 1. Checkout the specific branch selected by the user
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # 2. Setup Terraform CLI (No working-directory needed here)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.x

      # 3. Terraform Init (Initializes backend from the target directory)
      - name: Terraform Init
        id: init
        # Apply the working-directory to this step using the ENV_DIR variable
        working-directory: ${{ env.ENV_DIR }}
        run: terraform init

      # 4. Terraform Plan (Saves the plan artifact from the target directory)
      - name: Terraform Plan
        id: plan
        # Apply the working-directory to this step
        working-directory: ${{ env.ENV_DIR }}
        run: terraform plan -no-color -out=tfplan -lock-timeout=15m
        continue-on-error: true

      # 5. Conditional Apply Step (Runs apply from the target directory)
      - name: Terraform Apply
        # Apply the working-directory to this step
        working-directory: ${{ env.ENV_DIR }}
        run: terraform apply -auto-approve tfplan
