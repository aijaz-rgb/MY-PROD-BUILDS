name: 'Manual Terraform Deploy (Azure)'

on:
  # Allows manual running from the GitHub Actions UI
  workflow_dispatch:
    inputs:
      # 1. Input for selecting the target environment/folder
      environment:
        description: 'Target Environment Folder'
        type: choice
        required: true
        default: dev
        options:
          - dev
          - prod # Add other environments here as they are created
      
      # 2. Input for selecting the branch to run against
      branch:
        description: 'Branch to run against (e.g., main or feature branch)'
        type: string
        required: true
        default: main

# Defines a single job named 'terraform'
jobs:
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
    # 1. SET THE DEFAULT WORKING DIRECTORY HERE:
    defaults:
      run:
        working-directory: environments/${{ github.event.inputs.environment }} # OR just 'environments/dev' if not using inputs
    
    # Set the working directory dynamically based on user input


    # Map the GitHub Secrets to environment variables for authentication
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    steps:
      # 1. Checkout the specific branch selected by the user
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

     
      # 2. Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.x

      # 3. Terraform Init (Initializes backend based on the working-directory)
      - name: Terraform Init
        id: init
        run: terraform init

      # 4. Terraform Plan (Saves the plan artifact)
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan -lock-timeout=15m
        continue-on-error: true

      # 5. Conditional Apply Step (Requires human approval/verification)
      - name: Terraform Apply
        # IMPORTANT: The 'if' condition is set to 'always()' here because manual workflows 
        # often rely on a human reviewing the plan output BEFORE approving the Apply.
        # However, for true automated "Apply" you should use a separate CI/CD trigger 
        # or require a GitHub Environment Approval rule.
        run: terraform apply -auto-approve tfplan
        
